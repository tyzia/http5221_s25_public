






Plan



git cherry-pick
git merge conflicts

paths
root

Usability
10 Heuristics of Usability


















git cherry-pick

This command will copy a commit.


Demo (terminal) How to copy commit from
one branch into another:

> mkdir 1
> cd 1
> git init
> vim index.html i hello world :x
> git add .
> git commit -m "Create index.html"
> git checkout -b feature
> vim index.html i all the best :x
> git commit -am "Add all the best"
> git log --oneline (to see all commits)
> git checkout main
> git log --oneline
> vim index.html (to see that there is no 'all the best')
> git cherry-pick <commit hash>
> git log --oneline (now we see the commit)
> vim index.html























git merge conflict

It occurs when two branches change the same line.

Demo

> mkdir 1
> cd 1
> git init
> vim index.html :i hello world :x
> git add index.html
> git commit -m "Create index.html file"
> git brach a
> git branch b
> git branch
> git checkout a
> vim index.html :i a :x
> git commit -am "Add a"
> git checkout b
> vim index.html :i b :x
> git commit -am "Add b"
> git merge a
> git status  Unmerged paths
> vim index.html

<<<<<<< HEAD
b hello world
=======
a hello world
>>>>>>> a

 - `<<<<<<< HEAD` marks the beginning of the conflict.
 - `=======` separates the changes from the two branches.
 - `>>>>>>> a` marks the end of the conflict.


Resolve the conflict - means delete all that is not needed
and git add index.html

> git status  // the conflict is still not resolved
> git addd index.html  // resolve the conflict
> git commit // will create Merge commit
> git log --oneline

> git checkout a
> vim index.html // we don't see b


Summary

1. What causes merge conflicts?
When two branches modify the same part of a file,
and Git cannot automatically merge the changes.

2. How to see the conflicts?
Open the file and look for `<<<<<<<`, `=======`, and `>>>>>>>`.

3. How to resolve conflicts?
Manually edit the file.
Choose which changes to keep.
Delete all not needed and markers (`<<<<<<<`, `=======`, and `>>>>>>>`)
git add .
git commit
















Path
















What is a Path?

Path === location of file

Usually in web development files are called 'resources'.

The most common resources are:

- images (<img>)
- scripts (*.js)
- stylesheets (*.css)


Before continue talking about file systems and paths,
let's talk about: root


What is root?












Root
The root directory on a server refers to the
topmost directory of the file system in Linux-based systems.

In a file system, the root directory itself doesn't have a "name"
in the traditional sense. It is simply represented by a single slash /.
The term "root" is more of a concept or label that helps people understand
its position in the file system hierarchy, rather than referring to a
directory with a specific name.

For example,

we have file D.html on a server:
  inside folderC
  inside folderB
  inside folderA
  folderA is in the root of the server

the path to this file will be:

/folderA/folderB/folderC/D.html

Key Point:

The 'root' (/) here refers to the system-level root.
It’s the starting point of the entire file system on the server.
You can think of this as the "highest" directory on the entire system.








Practice 1
"How to refer to the root folder on the server?"

Your answer:
---

path = ""

---

Practice 2
"How to refer to the folder 'courses' inside 'humber' folder
which is in the root of the server?"

Your answer:
---

path = ""

---



There are other "roots" out there.

- project root
- web or document root

Usually main folder of the project is called 'root'.

For example:

you have "my_project" folder which has html, js, css files.
The location of your project on the server is:

/Users/andrei/Documents/Downloads/projects/my_project/*

* - means that there are some files inside

The 'root' of your project will be 'my_project' folder.
The 'root' of your server will still be the leftmost /


One more type of root - the folder accessible from the web.

When you access a website, there is a different concept of
"root" called:

web root
document root

This is the folder where your web server (like Apache or Nginx)
serves the website files from.

The web root is usually a subdirectory within the file system
that is specifically configured to be publicly accessible
via a web browser.

For example,

you host a website with domain: my-super-domain.com

On a server, where you host your website files,
those are located at:

/var/www/my-super-domain.com/public_html/*

This is file system path.

This server can host many websites,
so there files will be located as:

/var/www/website1/public_html/*
/var/www/website2/public_html/*
...
/var/www/website9/public_html/*

Your webserver (Apache or Nginx) is configured to
serve files from a specific folder on your server.
Usually it is 'public_html'.

So your 'public_html' folder is the web or document root
for a specific domain.

Once you type 'my-super-domain.com/index.html' in the browser,
your browser will find the server and will request
a file (usually index.html) from this server.
The webserver will look for index.html inside of web root
for this domain and will send this file back to the browser.
In our case this file will be located at:

/var/www/my-super-domain.com/public_html/index.html

it will not go to any other file, like this:

/var/www/NOT-my-domain.com/public_html/index.html

because this 'public_html' is a web root of other
domain (not-my-domain.com).

Once again:

web root is mapped to 'public_html' for a specific domain via Apache.

web url:
https://my-super-domain.com/index.html

real file system path:
/var/www/my-super-domain.com/public_html/index.html


Slash

In a file path, the slash (/) serves two roles depending on the context:

- As the Root Directory Indicator (/):
When the slash is by itself at the beginning of a path

- As a Path Separator Between Directories:
In all other cases, the slash acts as a separator between directories

Example:
/var/www/my-super-domain.com/public_html/index.html


Some more syntax here:

.
..

In file systems, . (dot) and .. (double dot) are special directory
references that are used to navigate the file structure.

. (single dot) refers to the current directory.
.. (double dot) refers to the parent directory (one level up).


.

It is often used to specify the current directory explicitly,
though in many cases it’s optional.
The system already assumes you are working within the current directory.

This means that either is acceptable as path:

path = "./index.html"
("look for file index.html in current directory")

or

path = "index.html"
("look for file index.html in current directory")


..
The .. represents the parent directory.
The directory one level up in the hierarchy.

For example

We are in /home/user/docs/
Our current directory is 'docs/'.

path "../index.txt"
("go one directory up compared to where you
are now and refer to index.txt inside that directory")

is the same as:

path: "/home/user/index.txt"

Explanation:

../index.txt

The first .. means move up one level to the parent directory:

/home/user/docs/ → /home/user/

get file index.txt inside of that folder




path "../../login.txt"

is the same as:

path: "/home/login.txt"

Explanation:

../../login.txt

The first .. means move up one level to the parent directory:

/home/user/docs/ → /home/user/

The second .. means move up another level:

/home/user/ → /home/

get file login.txt inside of that folder


Practice 3
We are in /home/user/docs/
"What will be the path?"
./../assets/styles.css

Your answer
---

path = ""

---

Practice 4
We are in /home/user/docs/
"What path will be this?"
../../../hello.txt

Your answer
---

path = ""

---

Practice 5
We are in /home/user/docs/
"What path will be this?"
../../../../hello.txt

Your answer
---

path = ""

---

We can access the resource from two different places:

- from web
- from local file system

What will happen if a resource is not found?

404 error

Example of broken path to demo why it is important

So I have a folder and files inside:

broken_path_example/
  index.html
  style.css

Inspect in the network tab how styles are uploaded/requested.

If I change the path to stylesheet file,
the styles will look broken.

demo: broken_path_example/index.html







To sum up:

Paths are essential for linking files and resources together.

In JavaScript, paths are used to link
external resources like scripts, stylesheets,
or images.

Correctly using paths ensures that files
are properly located, loaded, and used in your project.

Broken paths = broken app.








Relative and Absolute paths

Relative path

A relative path specifies the location
of a file relative to the current file
or directory.

Example:

./style.css
./js/app.js
../assets/images/img.png
index.html

Relative path does not start from the root,
but from the point of reference where the request is made.

You can use relative paths in your html.

Example:

<script src="./app.js"></script>

app.js is the file in the same directory
as current file.

Example:

<img src="../logo.png" alt="Logo">

logo.png is the file in parent directory
compared to current file.


Implicit vs Explicit path

Explicit:
<img src="./logo.png">

we use ./ to explicitly say: "get logo.png from current directory".

Implicit:
<img src="logo.png">

we don't use ./ here, but we still say: "get logo.png from current directory"

Technically these are the same:

<img src="./logo.png">
<img src="logo.png">


Practice 6
Where webserver will be looking for this file?

<img src="/logo.png">

Your answer
---



---









Remember, that / means 'root' folder.
In case of web, when we refer a resource
as <img src="/path/to/asset">
leftmost / means 'web root' or 'document root',
which is usually a 'public_html' folder
somewhere on the server and not a file-system root.

Why use relative path?

You can move your files into other location
on the server, and as long as you maintain
the same file structure, the app will still work.

Especially useful if you want to have app in different
environments.

For example:

We have our project here:

/users/projects/develop/
|--assets/
|--|--images/
|--|--|--logo.png
|--index.html

inside of index.html we will use relative path:

<img src="assets/images/logo.png">

If we copy our project files into other folder:

/users/project/production/
|--assets/
|--|--images/
|--|--|--logo.png
|--index.html

<img src="assets/images/logo.png">

This code will still work, because relative hierarchy
between index.html and logo.png didn't change.

logo.png is still inside of assets/images relative
to where index.html is located.

What are cons of relative path?

- Can become confusing with complex file structure
resulting in too many ../ levels.

- If file structure changes, the code will be broken
unless you update all paths.

For example,

We had this structure:

/users/project/production/
|--assets/
|--|--images/
|--|--|--logo.png
|--index.html

<img src="assets/images/logo.png">

If we move our index.html into other folder
and don't update the path of <img>:

/users/project/production/
|--assets/
|--|--images/
|--|--|--logo.png
|--templates/
|--|--index.html

<img src="assets/images/logo.png">

This path will not work. Because it will result in:

/users/project/production/templates/assets/images/logo.png

this file doesn't exist at that location.



Absolute path

An absolute path specifies the full address or
location of a file from the root directory.

Example of absolute paths:

On server file system:
/users/username/projects/my-website.com/js/app.js

For web URL:
https://my-website.com/js/app.js

In both cases, the path describes the exact location.
There is no need to 'know' current location of file.

Code examples:

<script src="https://www.example.com/js/app.js"></script>

Absolute path where the script app.js will always
load from the same URL (https://www.example.com)

<script src="/js/app.js"></script>

Root-relative path. A kind of absolute path. The script will load from
the domain of the current file from web root folder.

<script src="//www.example.com/js/app.js"></script>

Protocol-Relative path. A kind of absolute path.
The protocol (http or https) is omitted, and the
browser uses the same protocol as the current page.

Pros of Absolute Paths:

- They always point to the same file,
regardless of the location of the request.

- Useful when linking to resources hosted on a CDN
(Content Delivery Network).

Con of Absolute Paths:

- Project becomes less portable because paths rely on
a specific location


Practice 7

You have this file structure:

/users/project/production/
|--assets/
|--|--images/
|--|--|--logo.png
|--|--styles/
|--|--|--style.css
|--scripts/
|--|--app.js
|--templates/
|--|--index.html
|--home.html

In the index.html you need to add logo.png and app.js.
In the home.html you need to add style.css (<link>).
In home.html you need to create anchor to index.html.

Your answer:
---

<!-- index.html -->

<img src=""> <!-- logo.png -->
<script src=""></script> <!-- app.js -->

<!-- home.html -->

<link rel="stylesheet" src=""> <!-- style.css -->
<a href="">Go To Index</a> <!-- index.html -->

---



Practice 8

/users/project/production/
|-- assets/
|   |-- images/
|   |   |-- banner.jpg
|   |-- styles/
|   |   |-- theme.css
|-- scripts/
|   |-- main.js
|-- templates/
|   |-- about.html
|   home.html


Requirements:
In home.html, you need to add the banner.jpg image and main.js script.
In about.html, you need to add the theme.css stylesheet.
In about.html, you need to create a link to home.html.

Your answer:
---

<!-- home.html -->
<img src=""> <!-- banner.jpg -->
<script src=""></script> <!-- main.js -->

<!-- about.html -->
<link rel="stylesheet" href=""> <!-- theme.css -->

<!-- about.html -->
<a href="">Go to Home</a> <!-- home.html -->

---





















Usability



Usability - how people will use your website.

" Web usability - The extent to which specified users can find,
understand and use information and services online."

                Government of Canada, Standard on Web Usability



Usability test - to determine if the website is usable.

Heuristics - a checklist of usability principles which we should consider
when we build our website, if we want it to be usable.

The most well-known - 10 Usability Heuristics of Jakob Nielsen

https://www.nngroup.com/articles/ten-usability-heuristics/

Heuristic Evaluation - inspecting the website according
to usability heuristics.

Example

Heuristic Evaluation of a website
based on Jakob Nielsen's 10 usability heuristics.

https://reservations.ontarioparks.ca/

1. Visibility of System Status

- When user selects campground, they can see loading indicators.

2. Match Between System and the Real World

- Familiar language ('campground', 'backcountry', etc.) is used.

3. User Control and Freedom

- Users can easily navigate back.

4. Consistency and Standards

- The design follows common web conventions: Sign in, Cart, Reservations.

5. Error Prevention

- The site could enhance error prevention by making
default value for Equipment field.

6. Recognition Rather Than Recall

- When I select Mew Lake campground I see it belongs to Algonquin park.
- Legend below the map.

7. Flexibility and Efficiency of Use

- Saved searches for returning users can improve efficiency.

8. Aesthetic and Minimalist Design

- The design is mostly clean and minimalist.

9. Help Users Recognize, Diagnose, and Recover from Errors

- Error messages are present helping users how to fix their issues.

10. Help and Documentation

- FAQ page.
- Descriptions of the campgrounds.





Thank you!